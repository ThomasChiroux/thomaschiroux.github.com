<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>chiroux.org</title><link>http://chiroux.org/</link><description></description><atom:link href="http://chiroux.org/feeds/python.rss.xml" rel="self"></atom:link><lastBuildDate>Mon, 03 Dec 2012 00:56:00 +0100</lastBuildDate><item><title>Bonnes pratiques (?) pour l'héritage multiple en python</title><link>http://chiroux.org/bonnes-pratiques-pour-lheritage-multiple-en-python.html</link><description>&lt;div class="figure"&gt;
&lt;img alt="Man of steel - CC - auteur: http://www.flickr.com/photos/thomashawk/2344049327/" src="static/media/images/superman_truck.jpg" style="width: 341px; height: 222px;" /&gt;
&lt;p class="caption"&gt;Man of steel - CC - &lt;a class="reference external" href="http://www.flickr.com/photos/thomashawk/2344049327/"&gt;auteur&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="gne"&gt;
&lt;h2&gt;Gné ?&lt;/h2&gt;
&lt;p&gt;Récemment je me suis retrouvé confronté à un problème bizarre, incompréhensible
au premier abord qui m'a fait réfléchir sur mes pratiques en python concernant
la gestion des objets de l'héritage.
Voici un état de ma réfléxion à ce sujet.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="heritage-simple-multiple-et-les-new-style-classes"&gt;
&lt;h2&gt;Héritage, simple, multiple et les new-style-classes&lt;/h2&gt;
&lt;p&gt;Depuis python 2.2 a été introduit les new-style-classes, qui héritent toutes
de object.&lt;/p&gt;
&lt;p&gt;Par exemple, avant, c'était:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Vehicule&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;et maintant, on écrit (en python &amp;lt;= 2.7.x):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Vehicule&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;En python 2 donc, hériter de object est la marque de fabrique des new-style-classes.&lt;/p&gt;
&lt;div class="tip"&gt;
&lt;p class="first admonition-title"&gt;Tip&lt;/p&gt;
&lt;p class="last"&gt;En python 3, on peut à nouveau écrire les classes de l'ancienne
façon et ce seront quand même des new-styles-classes.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Je vous passe toutes les différences old-new, ce qui va nous intéresser ici
c'est la gestion de l'héritage et donc l'appel aux méthodes des classes parentes.&lt;/p&gt;
&lt;p&gt;Prenons un exemple un peu plus complet: (les exemples ci-dessous fonctionnent en python2 et python3 (testé en 3.3))&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Vehicule&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Classe decrivant un vehicule&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nombre_de_roues&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;moteur&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;couleur&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Constucteur de vehicule&lt;/span&gt;

&lt;span class="sd"&gt;        Keyword arguments:&lt;/span&gt;
&lt;span class="sd"&gt;        :nombre_de_roues: (int); le nombre de roues du vehicule&lt;/span&gt;
&lt;span class="sd"&gt;        :moteur: (boolean): est-ce qu&amp;#39;il a un moteur ou non&lt;/span&gt;
&lt;span class="sd"&gt;        :couleur: (str): la couleur du vehicule&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Vehicule constructor&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nombre_de_roues&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nombre_de_roues&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;moteur&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;moteur&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;couleur&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;couleur&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Remorque&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Un conteneur d&amp;#39;une certaine capacite&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;capacite&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Constructeur de Remorque&lt;/span&gt;

&lt;span class="sd"&gt;        Keyword arguments:&lt;/span&gt;
&lt;span class="sd"&gt;        :capacite: (float): capactite de stockage en kg&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Remorque constructor&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;capacite&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;capacite&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Camion&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Vehicule&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Remorque&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Un camion quoi !&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;marque&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nombre_de_roues&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;moteur&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;couleur&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;capacite&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Constuctor du Camion&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Camion constructor&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;marque&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;marque&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nombre_de_roues&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nombre_de_roues&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;moteur&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;moteur&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;couleur&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;couleur&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;capacite&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;capacite&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c"&gt;# on constuit un camion bleu de 35T&lt;/span&gt;
    &lt;span class="n"&gt;mon_beau_camion&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Camion&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Daf&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;bleu&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;35000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Mon beau camion &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt; &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt; a &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt; roues et transporte &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;T&amp;quot;&lt;/span&gt;
          &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mon_beau_camion&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;marque&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
             &lt;span class="n"&gt;mon_beau_camion&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;couleur&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
             &lt;span class="n"&gt;mon_beau_camion&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nombre_de_roues&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
             &lt;span class="n"&gt;mon_beau_camion&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;capacite&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;en l'exécutant, on obtient ceci:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Camion constructor
Mon beau camion Daf bleu a 4 roues et transporte 35.0T
&lt;/pre&gt;
&lt;p&gt;Cela fonctionne, mais on ne profite pas vraiment de l'héritage: on
a redéfinit dans notre constructeur de Camion ce que faisait déjà
les contructeurs de Vehicule et de Remorque.&lt;/p&gt;
&lt;p&gt;C'est là que &lt;a class="reference external" href="http://docs.python.org/2/library/functions.html#super"&gt;super()&lt;/a&gt;
entre en jeu: grâce à super(), on va pouvoir appeler
les constructeurs des classes parentes.&lt;/p&gt;
&lt;p&gt;On va changer le constructeur de Camion et essayer d'appeler super():&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Camion&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Vehicule&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Remorque&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Un camion quoi !&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;marque&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nombre_de_roues&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;moteur&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;couleur&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;capacite&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Constuctor du Camion&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Camion constructor&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Camion&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;marque&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;marque&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Mais on est confronté à un premier problème: super() étant super-intelligent
il va se débrouiller pour appeler les __init__ de chaque classe parente, le
tout une seule fois (voir plus bas).
Mais nos __init__ de Vehicule et Remorque n'ont pas les mêmes arguments en
entrée, donc comment va faire super ?
Testons avec l'exemple ci-dessus en ne mettant aucun argument:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Camion constructor
Traceback (most recent call last):
  File &amp;quot;ex2.py&amp;quot;, line 46, in &amp;lt;module&amp;gt;
    mon_beau_camion = Camion(4, True, 'bleu', 35000)
  File &amp;quot;ex2.py&amp;quot;, line 38, in __init__
    super(Camion, self).__init__()
TypeError: __init__() missing 3 required positional arguments: 'nombre_de_roues', 'moteur', and 'couleur'
&lt;/pre&gt;
&lt;p&gt;bah ouai, logique, on a appelé un constructeur qui veut 3 args avec zéro arg.&lt;/p&gt;
&lt;p&gt;Alors comment faire ?
Si j'appelle __init__ avec les 3 args requis, j'aurais un problème quand super() appellera
le __init__ de Remorque qui n'attend qu'un seul argument.&lt;/p&gt;
&lt;p&gt;C'est ici qu'on défini donc une première bonne pratique: l'usage de **kwargs&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="kwargs"&gt;
&lt;h2&gt;**kwargs&lt;/h2&gt;
&lt;p&gt;**kwargs nous permet de passer ce qu'on veut comme arguments à une fonction
(ou méthode), dans laquelle on ira piocher ce qui nous intesse:&lt;/p&gt;
&lt;p&gt;Voici une première implémentation possible:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Vehicule&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Classe decrivant un vehicule&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nombre_de_roues&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;moteur&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;couleur&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Constucteur de vehicule&lt;/span&gt;

&lt;span class="sd"&gt;        Keyword arguments:&lt;/span&gt;
&lt;span class="sd"&gt;        :nombre_de_roues: (int); le nombre de roues du vehicule&lt;/span&gt;
&lt;span class="sd"&gt;        :moteur: (boolean): est-ce qu&amp;#39;il a un moteur ou non&lt;/span&gt;
&lt;span class="sd"&gt;        :couleur: (str): la couleur du vehicule&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Vehicule constructor&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nombre_de_roues&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nombre_de_roues&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;moteur&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;moteur&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;couleur&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;couleur&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Remorque&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Un conteneur d&amp;#39;une certaine capacite&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;capacite&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Constructeur de Remorque&lt;/span&gt;

&lt;span class="sd"&gt;        Keyword arguments:&lt;/span&gt;
&lt;span class="sd"&gt;        :capacite: (float): capactite de stockage en kg&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Remorque constructor&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;capacite&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;capacite&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Camion&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Vehicule&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Remorque&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Un camion quoi !&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;marque&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Constuctor du Camion&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Camion constructor&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Camion&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;marque&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;marque&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c"&gt;# on constuit un camion bleu de 35T&lt;/span&gt;
    &lt;span class="n"&gt;mon_beau_camion&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Camion&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;marque&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Daf&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                             &lt;span class="n"&gt;nombre_de_roues&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                             &lt;span class="n"&gt;moteur&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                             &lt;span class="n"&gt;couleur&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;bleu&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                             &lt;span class="n"&gt;capacite&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;35000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Mon beau camion &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt; &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt; a &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt; roues et transporte &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;T&amp;quot;&lt;/span&gt;
          &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mon_beau_camion&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;marque&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
             &lt;span class="n"&gt;mon_beau_camion&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;couleur&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
             &lt;span class="n"&gt;mon_beau_camion&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nombre_de_roues&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
             &lt;span class="n"&gt;mon_beau_camion&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;capacite&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Il y a un premier impact d'utiliser **kwargs: on va devoir nommer
tous nos arguments à l'appel de la méthode.
Pour tout dire, on pourrait aussi utiliser *args en plus de **kwargs pour
récupérer les arguments non nommés, mais cela ne marcherait qu'au premier niveau
(et encore, il faut vraiment savoir ce que l'on fait), donc on va l'éviter et
s'obliger à nommer les arguments lors des appels.
C'est d'ailleurs une bonne pratique générale à toujours utiliser: cela rend
le code plus lisible&lt;/p&gt;
&lt;div class="admonition-bonne-pratique admonition"&gt;
&lt;p class="first admonition-title"&gt;Bonne pratique&lt;/p&gt;
&lt;p class="last"&gt;Toujours appeller une fonction ou une méthode en nommant chaque argument&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Donc que se passe-t-il dans nos appels (en théorie):&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;on appelle __init__ de Camion avec 5 arguments nommés.&lt;/li&gt;
&lt;li&gt;le constructeur de Camion attend lui un argument en particulier: marque
Il va donc récupérer pour lui l'argument marque et laisser tous les autres
dans un dict-like: kwargs&lt;/li&gt;
&lt;li&gt;on appelle super() avec **kwargs, du coup chaque constructeur de Vehicule et
Remorque va récupérer les 4 arguments restant qui chacun prendrons
ce dont ils ont besoin.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Dans cet exemple, cela devrait donc bien fonctionner.
Par contre on pourrait imaginer un exemple plus complexe ou une classe parente
aurait aussi un argument 'marque' dans son constructeur. Et là, comme marque a
été 'attrapé' par le contructeur de Camion, il ne serait pas passé aux constructeurs
Parent.
On va donc procéder d'une manière un peu moins souple, mais plus générique:
utiliser uniquement **kwargs:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Vehicule&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Classe decrivant un vehicule&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Constucteur de vehicule&lt;/span&gt;

&lt;span class="sd"&gt;        Keyword arguments:&lt;/span&gt;
&lt;span class="sd"&gt;        :nombre_de_roues: (int); le nombre de roues du vehicule&lt;/span&gt;
&lt;span class="sd"&gt;        :moteur: (boolean): est-ce qu&amp;#39;il a un moteur ou non&lt;/span&gt;
&lt;span class="sd"&gt;        :couleur: (str): la couleur du vehicule&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Vehicule constructor&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nombre_de_roues&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;nombre_de_roues&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;moteur&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;moteur&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;couleur&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;couleur&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Remorque&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Un conteneur d&amp;#39;une certaine capacite&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Constructeur de Remorque&lt;/span&gt;

&lt;span class="sd"&gt;        Keyword arguments:&lt;/span&gt;
&lt;span class="sd"&gt;        :capacite: (float): capactite de stockage en kg&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Remorque constructor&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;capacite&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;capacite&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Camion&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Vehicule&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Remorque&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Un camion quoi !&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Constuctor du Camion&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Camion constructor&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Camion&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;marque&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;marque&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c"&gt;# on constuit un camion bleu de 35T&lt;/span&gt;
    &lt;span class="n"&gt;mon_beau_camion&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Camion&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;marque&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Daf&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                             &lt;span class="n"&gt;nombre_de_roues&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                             &lt;span class="n"&gt;moteur&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                             &lt;span class="n"&gt;couleur&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;bleu&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                             &lt;span class="n"&gt;capacite&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;35000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Mon beau camion &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt; &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt; a &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt; roues et transporte &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;T&amp;quot;&lt;/span&gt;
          &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mon_beau_camion&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;marque&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
             &lt;span class="n"&gt;mon_beau_camion&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;couleur&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
             &lt;span class="n"&gt;mon_beau_camion&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nombre_de_roues&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
             &lt;span class="n"&gt;mon_beau_camion&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;capacite&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Bon clairement c'est plus moche, mais c'est le moyen de correctement passer
les arguments aux méthodes des classes parentes.&lt;/p&gt;
&lt;p&gt;Si vous maitrisez parfaitement vos APIs, vous pouvez utiliser la première méthode,
mais pour __init__ je pense qu'il vaut mieux faire comme ci-dessus.&lt;/p&gt;
&lt;p&gt;Alors, maintenant lançons ce programme:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Camion constructor
Vehicule constructor
Traceback (most recent call last):
  File &amp;quot;ex2.py&amp;quot;, line 53, in &amp;lt;module&amp;gt;
    mon_beau_camion.capacite / 1000))
AttributeError: 'Camion' object has no attribute 'capacite'
&lt;/pre&gt;
&lt;p&gt;Merde ça ne marche pas !
Que se passe-t-il ?&lt;/p&gt;
&lt;p&gt;On voit, avant le traceback qu'on est bien passé par le constructeur de Camion
puis celui de Vehicule. Mais c'est tout...
Où est passé le constructeur de Remorque ?
Visiblement il n'a pas été appelé.&lt;/p&gt;
&lt;p&gt;Alors que normalement c'est le boulot de super() de bien appeler tous les
constructeursquivontbien.
Alors que ce passe-t-il ?&lt;/p&gt;
&lt;div class="note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;le MRO c'est quoi ?
La signification du terme c'est: &lt;strong&gt;Method Resolution Order&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;En résumé, c'est le système qu'utilise python pour passer dans chaque classe
de l'arbre des héritages, de façon a ne passer qu'une fois dans une classe donnée
et de manière à éviter les boucles ou les résolutions impossibles.&lt;/p&gt;
&lt;p&gt;L'accès au MRO calculé par python est simple, il suffit d'aller regarder __mro__
pour une Classe donnée.&lt;/p&gt;
&lt;p class="last"&gt;Un bon article (en anglais) décrit le mode de calcul du MRO: &lt;a class="reference external" href="http://www.cafepy.com/article/python_attributes_and_methods/python_attributes_and_methods.html#method-resolution-order"&gt;MRO description&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Regardons donc le __mro__ de notre class Camion:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;Camion&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__mro__&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="nc"&gt;__main__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Camion&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&amp;gt;,&lt;/span&gt;
 &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="nc"&gt;__main__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Vehicule&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&amp;gt;,&lt;/span&gt;
 &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="nc"&gt;__main__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Remorque&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&amp;gt;,&lt;/span&gt;
 &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="nc"&gt;object&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&amp;gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Dans notre exemple, python ira chercher la méthode de Camion, puis a chaque appel de super()
celle de Vehicule, Remorque et enfin object.&lt;/p&gt;
&lt;p&gt;Alors donc pourquoi notre programme ne va pas appeler Remorque.__init__() ?
Et bien c'est parce que on a cassé l'arbre de résolution en omettant d'appeler
super() dans le constructeur de Véhicule.&lt;/p&gt;
&lt;p&gt;Si on ajoute dans Vehicule.__init__:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Vehicule&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;et que l'on relance notre programme, on obtient ceci:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Camion constructor
Vehicule constructor
Remorque constructor
Mon beau camion Daf bleu a 4 roues et transporte 35.0T
&lt;/pre&gt;
&lt;p&gt;Cela fonctionne.
Pourtant il manque encore un appel de super() dans le constructeur de Remorque.
Ici cela ne porte pas à conséquence, car selon le mro, Remorque est le dernier appelé
avant object. Donc on a cassé la résolution mais à la toute fin.&lt;/p&gt;
&lt;p&gt;Toutefois, si on inversait l'ordre d'héritage dans Camion en mettant:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Camion&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Remorque&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Vehicule&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;au lieu de:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Camion&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Vehicule&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Remorque&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;et que l'on relance le programme, on obtient à nouveau une erreur:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Camion constructor
Remorque constructor
Traceback (most recent call last):
  File &amp;quot;ex3.py&amp;quot;, line 51, in &amp;lt;module&amp;gt;
    mon_beau_camion.couleur,
AttributeError: 'Camion' object has no attribute 'couleur'
&lt;/pre&gt;
&lt;p&gt;En effet, nous nous arretons au constructeur de Remorque par manque de l'appel de super().&lt;/p&gt;
&lt;p&gt;Comme nous ne pouvons pas deviner dans quel ordre un programmeur choisira de faire
hériter ses classes, il vaut donc mieux mettre l'appel à super() dans toutes les classes.&lt;/p&gt;
&lt;p&gt;Cela donne donc le code complet suivant:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Vehicule&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Classe decrivant un vehicule&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Constucteur de vehicule&lt;/span&gt;

&lt;span class="sd"&gt;        Keyword arguments:&lt;/span&gt;
&lt;span class="sd"&gt;        :nombre_de_roues: (int); le nombre de roues du vehicule&lt;/span&gt;
&lt;span class="sd"&gt;        :moteur: (boolean): est-ce qu&amp;#39;il a un moteur ou non&lt;/span&gt;
&lt;span class="sd"&gt;        :couleur: (str): la couleur du vehicule&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Vehicule constructor&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Vehicule&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nombre_de_roues&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;nombre_de_roues&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;moteur&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;moteur&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;couleur&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;couleur&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Remorque&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Un conteneur d&amp;#39;une certaine capacite&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Constructeur de Remorque&lt;/span&gt;

&lt;span class="sd"&gt;        Keyword arguments:&lt;/span&gt;
&lt;span class="sd"&gt;        :capacite: (float): capactite de stockage en kg&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Remorque constructor&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Remorque&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;capacite&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;capacite&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Camion&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Vehicule&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Remorque&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Un camion quoi !&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Constuctor du Camion&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Camion constructor&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Camion&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;marque&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;marque&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c"&gt;# on constuit un camion bleu de 35T&lt;/span&gt;
    &lt;span class="n"&gt;mon_beau_camion&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Camion&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;marque&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Daf&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                             &lt;span class="n"&gt;nombre_de_roues&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                             &lt;span class="n"&gt;moteur&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                             &lt;span class="n"&gt;couleur&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;bleu&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                             &lt;span class="n"&gt;capacite&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;35000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Mon beau camion &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt; &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt; a &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt; roues et transporte &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;T&amp;quot;&lt;/span&gt;
          &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mon_beau_camion&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;marque&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
             &lt;span class="n"&gt;mon_beau_camion&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;couleur&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
             &lt;span class="n"&gt;mon_beau_camion&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nombre_de_roues&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
             &lt;span class="n"&gt;mon_beau_camion&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;capacite&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;et donc au final deux bonnes pratiques supplémentaires:&lt;/p&gt;
&lt;div class="admonition-bonne-pratique admonition"&gt;
&lt;p class="first admonition-title"&gt;Bonne pratique&lt;/p&gt;
&lt;p&gt;Toujours ajouter **kwargs dans les méthodes et appeler super() avec
**kwargs comme argument.&lt;/p&gt;
&lt;p class="last"&gt;Pour la méthode __init__(), si possible utiliser uniquement **kwargs&lt;/p&gt;
&lt;/div&gt;
&lt;div class="admonition-bonne-pratique admonition"&gt;
&lt;p class="first admonition-title"&gt;Bonne pratique&lt;/p&gt;
&lt;p class="last"&gt;Même pour les classes héritant directement de object, il faut
quand même appeler super(), en particulier pour __init__().&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="controverses-et-conclusion"&gt;
&lt;h2&gt;Controverses et conclusion&lt;/h2&gt;
&lt;p&gt;L'utilisation de super() ne fait pas l'unanimité, notamment à cause des
contraintes décrites plus haut.&lt;/p&gt;
&lt;p&gt;Si tout le monde (en particulier les modules qui ne sont pas les vôtres) n'utilise
pas ces 'bonnes' pratiques, alors il y a un sérieux risque de casser l'arbre en
cours de route et que votre programme ne marche pas... alors qu'à la base ce n'est
pas de votre faute.&lt;/p&gt;
&lt;p&gt;En regardant rapidement les modules standards python, très peu utilisent aujourd'hui
super(), même en 3.3
J'imagine que c'est la même chose dans les modules de la communauté, notamment Pypi.&lt;/p&gt;
&lt;p&gt;Du coup il faut être très vigilant lorsque vous programmez des classes a héritage
multiple avec des modules tiers. Si vous héritez d'un seul module tiers (y compris ceux de la stdlib),
mettez le en dernier: ainsi s'il casse la résolution, cela ne devrait pas porter
à conséquence.&lt;/p&gt;
&lt;p&gt;Je pense que la controverse concernant l'utilisation de super() est justement
due à la faible utilisation de cette fonction, notamment dans les modules standard.
C'est une histoire de poule et d'oeuf.&lt;/p&gt;
&lt;p&gt;Enfin, perso je trouve la bonne pratique d'utilisation systématique de **kwargs
relativement peu élégante, notamment en utilisation systématique dans __init__.
Peut-être une évolution du langage à ce niveau serait souhaitable.&lt;/p&gt;
&lt;p&gt;Si de votre côté, vous avez d'autres pratiques pour gérer ces cas, n'hésitez
pas à les proposer en commentaire.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="references"&gt;
&lt;h2&gt;Références&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://fuhm.net/super-harmful/"&gt;super considered armful... or not&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://rhettinger.wordpress.com/2011/05/26/super-considered-super/"&gt;super considered super&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.cafepy.com/article/python_attributes_and_methods/python_attributes_and_methods.html#method-resolution-order"&gt;MRO description&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://python-history.blogspot.fr/2010/06/method-resolution-order.html"&gt;MRO history&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Thomas Chiroux</dc:creator><pubDate>Mon, 03 Dec 2012 00:56:00 +0100</pubDate><guid>tag:chiroux.org,2012-12-03:bonnes-pratiques-pour-lheritage-multiple-en-python.html</guid><category>python</category><category>programmation</category><category>objet</category></item><item><title>Envoyer les infos des capteurs oregon sur sen.se</title><link>http://chiroux.org/envoyer-les-infos-des-capteurs-oregon-sur-sense.html</link><description>&lt;p&gt;&lt;img alt="thgr328n" src="static/media/images/thgr328n.png" /&gt;&lt;/p&gt;
&lt;p&gt;Depuis quelques temps, je beta-teste &lt;a class="reference external" href="http://open.sen.se/"&gt;sen.se&lt;/a&gt;, un site à la &lt;a class="reference external" href="https://pachube.com/"&gt;pachube&lt;/a&gt; qui est
une sorte de plate-forme pour l'internet des objets. L'objet de cet
article n'est pas (encore) de découvrir et parcourir les différents
fonctionnalités et utilisation de sen.se, mais de décrire comment j'ai
fait pour envoyer les infos de mes capteurs oregon (température,
humidité, etc..) vers la plate-forme.&lt;/p&gt;
&lt;div class="section" id="recuperation-des-donnees-des-capteurs"&gt;
&lt;h2&gt;Récupération des données des capteurs&lt;/h2&gt;
&lt;p&gt;Les capteurs que j'utilise sont des sondes classiques, comme celle qu'on
peut trouver &lt;a class="reference external" href="http://fr.oregonscientific.com/cat-Stations-M%C3%A9t%C3%A9o-sub-Sondes-and-Accessoires.html"&gt;ici&lt;/a&gt;. J'ai notamment quelques thgr328 comme celui de la
photo. Je n'utilise pas de &amp;quot;centrale&amp;quot; oregon, mais à la place un
équipement super pratique : le &lt;a class="reference external" href="http://www.rfxcom.com/receivers.htm"&gt;rfx-com&lt;/a&gt; qui est capable de recevoir et
décoder tout un tas de capteurs fonctionnant en 433Mhz. Du coup, on
récupère en LAN des trames venant des capteurs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="uniformisation-et-decodage-des-trames-xpl"&gt;
&lt;h2&gt;Uniformisation et décodage des trames : xpl&lt;/h2&gt;
&lt;p&gt;Les trames venant du rfxcom sont 'brutes', directement au format de
l'émétteur (oregon ici) et pas toujours très simple à lire, du coup on
va les uniformiser dans un protocole simple et pratique : &lt;a class="reference external" href="http://en.wikipedia.org/wiki/XPL_Protocol"&gt;xpl&lt;/a&gt; Pour
gérer le xpl et décoder les trames du rfxcom, j'utilise une librairie en
perl (et oui, en perl... désolé, c'était la plus complète qui tourne sur
linux, il y d'autres libs en développements très prometteuses en python,
mais on verra plus tard :-)) pour l'instant : &lt;a class="reference external" href="https://github.com/beanz/xpl-perl/"&gt;xpl-perl&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="installation-et-configuration-d-xpl-perl"&gt;
&lt;h2&gt;Installation et configuration d'xpl-perl&lt;/h2&gt;
&lt;p&gt;Ci-dessous rapidement le chemin à suivre pour installer xpl-perl et le
rendre fonctionnel. Pour ce tuto, je part d'une débian squeeze vide, sur
un &lt;a class="reference external" href="http://fr.wikipedia.org/wiki/SheevaPlug"&gt;sheeva-plug&lt;/a&gt; (arm)&lt;/p&gt;
&lt;div class="section" id="installer-les-dependances-perl-necessaires"&gt;
&lt;h3&gt;Installer les dépendances perl nécessaires&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;apt-get install libconfig-yaml-perl
apt-get install libanyevent-perl
apt-get install libdatetime-format-dateparse-perl
apt-get install libsub-name-perl
apt-get install librrds-perl
apt-get install libio-all-perl
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="installer-xpl-perl-et-ses-modules"&gt;
&lt;h3&gt;Installer xpl-perl et ses modules&lt;/h3&gt;
&lt;p&gt;Ici j'installe la version en cours de développement d'xpl-perl car elle
intègre certains patchs qui permettent de décoder correctement tous mes
capteurs, mais il est possible que son fonctionnement soit un peu
aléatoire (perso je n'ai pas rencontré de problème) Le repository
d'xpl-perl est dispo sur github&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git clone https://github.com/beanz/xpl-perl.git
&lt;span class="nb"&gt;cd &lt;/span&gt;xpl-perl
perl Makefile.PL
make
make &lt;span class="nb"&gt;test&lt;/span&gt;
make install
&lt;span class="nb"&gt;cd&lt;/span&gt;

git clone git clone -b &lt;span class="s2"&gt;&amp;quot;build/master&amp;quot;&lt;/span&gt; https://github.com/beanz/device-rfxcom-perl.git
&lt;span class="nb"&gt;cd &lt;/span&gt;device-rfxcom-perl/
make
make install
&lt;span class="nb"&gt;cd&lt;/span&gt;

git clone https://github.com/beanz/anyevent-mocktcpserver-perl.git
&lt;span class="nb"&gt;cd &lt;/span&gt;anyevent-mocktcpserver-perl/
perl Makefile.PL
make
make install
&lt;span class="nb"&gt;cd&lt;/span&gt;

git clone https://github.com/beanz/anyevent-rfxcom-perl.git
&lt;span class="nb"&gt;cd &lt;/span&gt;anyevent-rfxcom-perl/
perl Makefile.PL
make
make install
&lt;span class="nb"&gt;cd&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="lancer-xpl-perl-mode-test"&gt;
&lt;h3&gt;lancer xpl-perl (mode test)&lt;/h3&gt;
&lt;p&gt;Pour que plusieurs modules xpl cohabitent sur une même machine, il est
nécessaire de lancer un HUB-xpl qui va récupérer les messages UDP en
broadcast sur le port 3865 et les redistribuer aux process internes, on
lance donc en premier un hub xpl, puis on lance le premier module pour
recevoir les infos du rfxcom:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;xpl-hub &amp;amp;
/usr/bin/perl /usr/local/bin/xpl-rfxcom-rx --verbose 192.168.1.xx
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Attention de bien préciser l'ip de votre rfxcom et là le module
fait son job et commence à décoder les trames rfxcom et les envoyer sur
le réseau en xpl.&lt;/p&gt;
&lt;p&gt;Pour vérifier que les trames sont bien transmise,
xpl-perl dispose d'un logger que l'on peut lancer pour tracer les trames:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;/usr/bin/perl /usr/local/bin/xpl-logger -v
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;qui au bout de quelques secondes me trace des infos de capteur:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;192.168.1.78:49635 &lt;span class="o"&gt;[&lt;/span&gt;xpl-stat/sensor.basic: bnz-rfxcomrx.debian -&amp;gt; * bthr918n.b1/temp/25.8&lt;span class="o"&gt;]&lt;/span&gt;
192.168.1.78:49635 &lt;span class="o"&gt;[&lt;/span&gt;xpl-stat/sensor.basic: bnz-rfxcomrx.debian -&amp;gt; * bthr918n.b1/humidity/43&lt;span class="o"&gt;]&lt;/span&gt;
192.168.1.78:49635 &lt;span class="o"&gt;[&lt;/span&gt;xpl-stat/sensor.basic: bnz-rfxcomrx.debian -&amp;gt; * bthr918n.b1/pressure/856/hPa&lt;span class="o"&gt;]&lt;/span&gt;
192.168.1.78:49635 &lt;span class="o"&gt;[&lt;/span&gt;xpl-stat/sensor.basic: bnz-rfxcomrx.debian -&amp;gt; * bthr918n.b1/battery/60/%&lt;span class="o"&gt;]&lt;/span&gt;
192.168.1.78:49635 &lt;span class="o"&gt;[&lt;/span&gt;xpl-stat/sensor.basic: bnz-rfxcomrx.debian -&amp;gt; * thgr328n.1a/temp/26.6&lt;span class="o"&gt;]&lt;/span&gt;
192.168.1.78:49635 &lt;span class="o"&gt;[&lt;/span&gt;xpl-stat/sensor.basic: bnz-rfxcomrx.debian -&amp;gt; * thgr328n.1a/humidity/47&lt;span class="o"&gt;]&lt;/span&gt;
192.168.1.78:49635 &lt;span class="o"&gt;[&lt;/span&gt;xpl-stat/sensor.basic: bnz-rfxcomrx.debian -&amp;gt; * thgr328n.1a/battery/90/%&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;L'important ici, c'est le nom du capteur, sa mesure et la valeur. Ex pour la
première ligne : bthr918n.b1/temp/25.8 correspond donc au capteur
bthr918n.b1 qui nous envoie sa température qui est de 25,8°&lt;/p&gt;
&lt;div class="section" id="bonus-rrd-et-rrd-graph"&gt;
&lt;h4&gt;Bonus: RRD et RRD graph&lt;/h4&gt;
&lt;p&gt;xpl perl vient aussi avec un module très pratique : xpl-rrd. Une fois
lancé, il se comporte comme le xpl-logger : il va récupérer
automatiquement les trames envoyées sur le réseau xpl et créer et
alimenter des bases &lt;a class="reference external" href="http://www.mrtg.org/rrdtool/"&gt;RRD&lt;/a&gt;, pas besoin de config, il fait tout
automatiquement. Il faut juste lui préciser un répertoire de destination
et il va créer des bases pour chaque capteur et chaque type de mesure.
ex:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;/usr/bin/perl -w /usr/local/bin/xpl-rrd -v /opt/maison/xpl-rrd/ &amp;amp;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ensuite, il ne nous reste plus qu'à
grapher, et là aussi xpl-perl fournis un petit outil qui va scanner les
bases rrd et générer les graphiques et les pages html qui vont bien.
Celui-ci, il faut le lancer en cron, par exemple toute les 10 minutes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;crontab -e
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;et placer:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;0,10,20,30,40,50 \* \* \* \* /usr/local/bin/xpl-rrd-graphs /opt/maison/xpl-rrd/ /opt/maison/xpl-rrd/graphs/
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ainsi tous les 10 minutes, les graphs seront mis à jour. Yapuka intégrer ces pages dans
un petit site web (sous lighty par exemple, &lt;a class="reference external" href="http://www.chiroux.com/installation-dun-serveur-web-securise-sous-ubuntu-9-04server/"&gt;voir un autre tuto pour
ça&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;&lt;img alt="image1" src="static/media/images/rrd-300x125.png" /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="sen-se"&gt;
&lt;h3&gt;sen.se&lt;/h3&gt;
&lt;p&gt;Maintenant que l'on a des infos de capteurs au sein de notre réseau, il
reste à écrire un bout de soft qui récupère ces infos et les transmet à
sen.se Bon au préalable, il va vous faloir un compte chez sen.se (comme
c'est actuellement en beta, il faut demander à s'inscrire) et ensuite il
va falloir créer autant de 'devices' que vous avez de capteurs et les
flux au sein de ces devices.&lt;/p&gt;
&lt;p&gt;Ex ici avec un de mes capteurs oregon:
&lt;img alt="image2" src="static/media/images/sense1.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="image3" src="static/media/images/sense2.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="image4" src="static/media/images/sense3.png" /&gt;&lt;/p&gt;
&lt;p&gt;On récupère donc des Feed_id, c'est ce qui
va nous permettre d'associer chaque mesure : chaque mesure de chaque
capteur sera associé à son propre feed ID. Ensuite il faut un programme
qui fait tout ça, et là on est de retour en python: j'ai écrit un bout
de programme qui va agir comme 'écouteur' du réseau xpl, récupérer les
messages, les traduire au format sen.se et les envoyer à la plate-forme.&lt;/p&gt;
&lt;p&gt;Je ne vais pas décrire ici tout le code, mais le source est &lt;a class="reference external" href="https://bitbucket.org/ThomasChiroux/py-xplsensor2net"&gt;disponible
ici sur bitbucket&lt;/a&gt;
Je tiens à remercier l'équipe &lt;a class="reference external" href="http://wiki.domogik.org/"&gt;domogik&lt;/a&gt; (j'y
reviendrais certainement plus tard: c'est ce projet en python qui est
très prometteur dont je parlais tout à l'heure), car j'ai récupéré du
projet la classe de décodage des message xpl: XplMessage (pourquoi
réécrire ce que d'autres ont déjà fait très bien ?).&lt;/p&gt;
&lt;p&gt;Mais à ce stade je n'ai pas voulu faire un plugin de domogik de mon programme car domogik
est un gros projet et je n'avais plus assez de place dans ma sheevaplug
pour le faire tenir. Du coup j'ai préféré faire un petit module autonome
pour l'instant. Il vous faudra donc récupérer le code source:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;hg clone https://bitbucket.org/ThomasChiroux/py-xplsensor2net
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;et créer un fichier de config (en partant du devices.cfg.sample).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;py-xplsensor2net
cp devices.cfg.sample devices.cfg
vim devices.cfg
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;dans ce fichier de config, pour chaque capteur oregon, on va
associer chaque mesure à un feed_id. Ne pas oublier non plus de
préciser sa clef d'API de sen.se dans la rubrique [GENERAL] ex d'un
fichier de config:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;[&lt;/span&gt;GENERAL&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;api_key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;PUT_YOUR_API_KEY_HERE

&lt;span class="c"&gt;# below are the list of sensors in the form:&lt;/span&gt;
&lt;span class="c"&gt;# [xplsensorname]&lt;/span&gt;
&lt;span class="c"&gt;# name = whatever you choose&lt;/span&gt;
&lt;span class="c"&gt;# parameter = feed_id&lt;/span&gt;
&lt;span class="c"&gt;# parameter = feed_id&lt;/span&gt;
&lt;span class="c"&gt;# ...&lt;/span&gt;

&lt;span class="o"&gt;[&lt;/span&gt;thgr328n.ff&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;Living Room
&lt;span class="nv"&gt;temp&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1234
&lt;span class="nv"&gt;humidity&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1235
&lt;span class="nv"&gt;battery&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1236
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;le capteur thgr328n.ff a
donc 3 flux : 'temp', 'humidity' et 'battery' associés respectivement
aux feed sen.se : 1234, 1235 et 1236 ensuite, lancez le programme:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;python xplsensor2net.py -i a.b.c.d &amp;amp;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;en remplaçant
a.b.c.d par l'adresse IP de la machine sur laquelle vous lancez ce
script. Et voilà c'est tout, les flux vont remonter tout seul vers
sen.se et vous pourrez en faire ce que vous voulez, comme des widgets
graphiques par exemple, mais aussi plein d'autres choses:&lt;/p&gt;
&lt;p&gt;&lt;img alt="image5" src="static/media/images/sense_widgets-1024x566.png" /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Thomas Chiroux</dc:creator><pubDate>Fri, 12 Aug 2011 17:18:00 +0200</pubDate><guid>tag:chiroux.org,2011-08-12:envoyer-les-infos-des-capteurs-oregon-sur-sense.html</guid><category>domotique</category><category>internet des objets</category><category>oregon</category><category>Programmation</category><category>Python</category><category>rfx-com</category><category>xpl</category></item></channel></rss>